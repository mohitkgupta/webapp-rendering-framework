package com.vedantatree.comps.dof;

import java.rmi.RemoteException;

import org.apache.commons.collections.map.LRUMap;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.vedantatree.utils.config.ConfigurationManager;
import org.vedantatree.utils.exceptions.ApplicationException;
import org.vedantatree.utils.exceptions.ComponentException;
import org.vedantatree.utils.exceptions.IErrorCodes;
import org.vedantatree.utils.exceptions.SystemException;
import org.vedantatree.utils.exceptions.server.ServerBusinessException;

import com.vedantatree.comps.dof.enterprise.JNDILookupManager;
import com.vedantatree.comps.dof.enterprise.clients.MasterTable;
import com.vedantatree.comps.dof.enterprise.clients.MasterTableHome;


/**
 * This class owns the responsibility to manage the metadata of all UI/Objects.
 * 
 * <p>
 * When a requested is received for a metadata, it checks whether this is presented in cache or not. If not, it
 * tries to load it from XML based metadata files (could be database later). If it is not found, it throws an exception.
 * Otherwise, it moves forward to see if database sychronization for this metadata is required or not (indicated by
 * shouldUseORMSchema). If yes, it calls master data bean on server and request it to synchronize the loaded metadata
 * withi database information also. Here enforceORM property comes in use, as master data bean will throw the error if
 * any property set in metadata from XML is not in sync with the database properties.
 * 
 * <p>
 * Metadata generated by this class is the core data structure for whole framework.
 * 
 * @author Mohit Gupta [mohit.gupta@vedantatree.com]
 */
public class DOSchemaManager
{

	/** For logging purpose */
	private static Log			LOGGER							= LogFactory.getLog( DOSchemaManager.class );

	private static LRUMap		map;

	private static int			METADATA_CACHE_SIZE;
	private static String		METADATA_CACHE_SIZE_PROPERTY	= "metadata.cache.size";
	private static final String	CONFIG_FILE_NAME				= "dof.properties";

	static
	{
		if( !ConfigurationManager.getSharedInstance().containsProperty( METADATA_CACHE_SIZE_PROPERTY ) )
		{
			try
			{
				ConfigurationManager.ensurePropertiesLoaded( CONFIG_FILE_NAME );
			}
			catch( ApplicationException e )
			{
				LOGGER.fatal( "Problem while initializing DOSchemaManager", e );
				throw new SystemException( IErrorCodes.COMPONENT_INITIALIZATION_ERROR,
						"Problem while initializing DOSchemaManager", e );
			}
		}
		Integer viewMetaDataCacheSize = ConfigurationManager.getSharedInstance()
				.getPropertyValueAsInteger( METADATA_CACHE_SIZE_PROPERTY );
		if( viewMetaDataCacheSize == null || viewMetaDataCacheSize.intValue() <= 0 )
		{
			SystemException se = new SystemException( IErrorCodes.INSTANTIATION_ERROR,
					"Viewmetadata cache size should be set as more than 0. Please define it correctly with propertyName as ["
							+ METADATA_CACHE_SIZE_PROPERTY + "]" );
			LOGGER.fatal( se );
			throw se;
		}
		METADATA_CACHE_SIZE = Integer.valueOf( viewMetaDataCacheSize );
	}

	public static DOMetaData getDOMetadata( String objectClassName ) throws ComponentException
	{
		/*
		 * psuedo code
		 * 
		 * check whether DOMetadata already present with cache or not if present: return it if not use XMLSchemaManager
		 * singleton instance get DOMetadata for the class
		 * 
		 * if DOMetadata useORMSchema == true if ormschema == local use HibernateSchemaManager singleton instance
		 * otherwise use DOSessionBean using JNDI call hiberante schema manager's merge DOMetadata
		 * 
		 * return DOMetadata
		 */
		LOGGER.trace( "entering :getClassMetadata . tableName[" + objectClassName + "]" );
		if( map == null )
		{
			map = new LRUMap( METADATA_CACHE_SIZE );
		}
		DOMetaData doMetaData = (DOMetaData) map.get( objectClassName );

		// Get doMetaData if it is null
		LOGGER.debug( "DOMetadata is [" + doMetaData + "]" );

		if( doMetaData == null )
		{
			try
			{
				doMetaData = XMLSchemaManager.getSharedInstance().getDOMetaData( objectClassName );

				if( doMetaData == null )
				{
					SystemException se = new SystemException( IErrorCodes.ILLEGAL_STATE_ERROR,
							"Data Object Metadata is found null. objectClassName[" + objectClassName + "]" );
					LOGGER.fatal( se );
					throw se;
				}

				if( doMetaData.shouldUseORMSchema() )
				{
					LOGGER.debug( "Merging DOMetaData" );
					// TODO - can lookup in constructor
					MasterTable masterTable = (MasterTable) JNDILookupManager.lookupRemoteEJB( "MasterTableBean",
							MasterTableHome.class );
					doMetaData = masterTable.mergeDOMetadataWithORMSchema( doMetaData );
				}

				map.put( objectClassName, doMetaData );
				LOGGER.debug( "DOMetadata id [" + doMetaData.getIdColumn().getDbName() + "]" );
				LOGGER.info( "LRUMap is [" + map + "]" );
			}
			catch( ServerBusinessException e )
			{
				LOGGER.error( "Error while merging DOMetadata with Server ORM schema", e );
				throw new ComponentException( e.getErrorCode(), "Error while merging DOMetadata with Server ORM schema",
						e );
			}
			catch( RemoteException e )
			{
				LOGGER.error( "Error while merging DOMetadata with Server ORM schema", e );
				throw new ComponentException( IErrorCodes.SERVER_SYSTEM_ERROR,
						"Error while merging DOMetadata with Server ORM schema", e );
			}
		}
		LOGGER.trace( "exiting :getClassMetadata . doMetaData[" + doMetaData + "]" );
		return doMetaData;

	}

}
